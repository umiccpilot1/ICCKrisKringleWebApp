import { useEffect, useState } from 'react';
import LinkPreviewTooltip from '../common/LinkPreviewTooltip.jsx';
import InitialsAvatar from '../common/InitialsAvatar.jsx';
import { buildEmployeePhotoUrl } from '../../utils/helpers.js';

export default function RecipientCard({ recipient, enlarged = false, isWishlistConfirmed = false }) {
  const [photoError, setPhotoError] = useState(false);
  const [previewsEnabled, setPreviewsEnabled] = useState(true);

  useEffect(() => {
    setPhotoError(false);
  }, [recipient?.photoFilename]);
  
  if (!recipient) {
    return (
      <div className={`mt-6 rounded-2xl border-2 border-dashed border-white/20 bg-white/5 px-6 text-center ${
        enlarged ? 'py-16' : 'py-10'
      }`}>
        <div className={`mb-4 opacity-30 ${enlarged ? 'text-7xl' : 'text-5xl'}`}>📭</div>
        <p className={`text-slate-400 ${enlarged ? 'text-base' : 'text-sm'}`}>Assignments will appear here once generated by the admin team.</p>
      </div>
    );
  }

  // Show prompt to complete wishlist if not confirmed
  if (!isWishlistConfirmed) {
    return (
      <div className={`mt-6 rounded-2xl border-2 border-dashed border-yellow-400 bg-gradient-to-br from-yellow-50 to-amber-50 px-6 text-center ${
        enlarged ? 'py-16' : 'py-10'
      }`}>
        <div className={`mb-4 ${enlarged ? 'text-6xl' : 'text-5xl'}`}>🎁</div>
        <h3 className={`font-bold text-gray-900 mb-3 ${enlarged ? 'text-2xl' : 'text-xl'}`}>
          Your Assignment Awaits!
        </h3>
        <p className={`text-amber-800 mb-4 ${enlarged ? 'text-base' : 'text-sm'} max-w-md mx-auto`}>
          Complete your wishlist above to reveal your Secret Santa recipient and their gift preferences.
        </p>
        <div className="inline-flex items-center gap-2 px-4 py-2 bg-yellow-100 border-2 border-yellow-400 rounded-full text-xs font-semibold text-yellow-800">
          <span>🎄</span>
          <span>Wishlist Required</span>
        </div>
      </div>
    );
  }

  return (
    <div
      data-testid="recipient-card"
      className={`mt-6 space-y-5 rounded-lg border border-brand-500/20 bg-gradient-to-br from-brand-50 to-white px-6 text-sm shadow-card text-center ${
      enlarged ? 'py-10' : 'py-7'
    }`}
    >
      <div className="flex flex-col items-center gap-2">
        <h2 className={`font-bold text-gray-900 flex items-center justify-center gap-2 ${
          enlarged ? 'text-2xl' : 'text-lg'
        }`}>
          Your recipient
        </h2>
        <span className="flex h-2 w-2 rounded-full bg-success animate-pulse-slow" title="Assignment active" />
      </div>
      
      <div className={`flex items-center justify-center gap-3 rounded-lg border border-accent/20 bg-accent/5 px-4 ${
        enlarged ? 'py-3.5' : 'py-2.5'
      }`}>
        <p className={`uppercase tracking-wide text-accent font-semibold ${
          enlarged ? 'text-sm' : 'text-xs'
        }`}>Keep it secret until reveal day</p>
      </div>
      
      {/* Hidden until hover - Name and Email in one container */}
      <div className="group relative">
        <div className={`space-y-3 text-sm rounded-lg bg-gradient-to-br from-gray-100 to-gray-50 border-2 border-dashed border-gray-300 cursor-pointer hover:border-brand-500 hover:shadow-lg transition-all duration-300 ${
          enlarged ? 'p-10' : 'p-6'
        }`}>
          {/* Blur overlay - hidden on hover */}
          <div
            data-testid="recipient-photo-overlay"
            className="absolute inset-0 backdrop-blur-lg bg-white/60 rounded-lg flex flex-col items-center justify-center gap-3 group-hover:opacity-0 transition-opacity duration-300 pointer-events-none z-10"
          >
            <img 
              src="/images/infosoft-logo.png" 
              alt="Infosoft Consulting Corporation" 
              className={`h-auto mb-2 ${enlarged ? 'w-52' : 'w-40'}`}
              onError={(e) => {
                e.target.style.display = 'none';
                e.target.nextElementSibling.style.display = 'block';
              }}
            />
            <div className={`hidden ${enlarged ? 'text-5xl' : 'text-4xl'}`}>🎭</div>
            <div className="relative">
              <div className="absolute inset-0 bg-gradient-to-r from-brand-500 to-red-600 blur-xl opacity-50 animate-pulse"></div>
              <p className={`relative font-black text-transparent bg-clip-text bg-gradient-to-r from-brand-600 via-red-500 to-brand-700 animate-pulse tracking-wide uppercase ${
                enlarged ? 'text-2xl' : 'text-xl'
              }`}>
                Hover to reveal
              </p>
            </div>
            <p className={`text-gray-600 font-semibold uppercase tracking-wider px-4 py-1.5 bg-yellow-100 border-2 border-yellow-400 rounded-full shadow-lg ${
              enlarged ? 'text-sm' : 'text-xs'
            }`}>
              ⚠️ Secret Santa Assignment
            </p>
          </div>
          
          {/* Actual content - revealed on hover */}
          <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            {/* Employee Photo */}
            <div className="flex justify-center mb-4">
              {recipient.photoFilename && !photoError ? (
                <img 
                  data-testid="recipient-photo"
                  src={buildEmployeePhotoUrl(recipient.photoFilename)}
                  alt={recipient.name}
                  className="w-[300px] h-[300px] rounded-full object-cover border-4 border-white shadow-lg"
                  onError={() => setPhotoError(true)}
                />
              ) : (
                <InitialsAvatar
                  data-testid="recipient-photo-fallback"
                  name={recipient.name}
                  size={300}
                />
              )}
            </div>
            
            <div className={`flex items-start justify-center gap-3 rounded-lg bg-white ${
              enlarged ? 'p-4' : 'p-3'
            }`}>
              <div>
                <span className={`font-medium text-muted-700 uppercase tracking-wider ${
                  enlarged ? 'text-sm' : 'text-xs'
                }`}>Name</span>
                <p className={`text-gray-900 font-semibold ${
                  enlarged ? 'text-xl' : 'text-lg'
                }`}>{recipient.name}</p>
              </div>
            </div>
            
            <div className={`flex items-start justify-center gap-3 rounded-lg bg-white mt-2 ${
              enlarged ? 'p-4' : 'p-3'
            }`}>
              <div>
                <span className={`font-medium text-muted-700 uppercase tracking-wider ${
                  enlarged ? 'text-sm' : 'text-xs'
                }`}>Email</span>
                <p className={`text-gray-900 font-medium ${
                  enlarged ? 'text-base' : 'text-sm'
                }`}>{recipient.email}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
        
      <div className="flex items-start justify-center gap-3 p-4 rounded-lg bg-gradient-to-br from-brand-50 to-brand-100 border border-brand-500/20">
        <div className="flex-1 max-w-sm mx-auto">
          {/* Wishlist Header with Toggle */}
          <div className="flex items-center justify-between mb-3">
            <span className="font-medium text-brand-600 text-xs uppercase tracking-wider">Wishlist</span>
            <button
              onClick={() => setPreviewsEnabled(!previewsEnabled)}
              className={`
                flex items-center gap-2 px-3 py-1.5 rounded-full text-xs font-semibold
                transition-all duration-200 shadow-sm hover:shadow
                ${previewsEnabled 
                  ? 'bg-brand-500 text-white hover:bg-brand-600' 
                  : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                }
              `}
              title={previewsEnabled ? 'Hide link previews' : 'Show link previews on hover'}
            >
              <span>{previewsEnabled ? '�️' : '�'}</span>
              <span>{previewsEnabled ? 'Previews ON' : 'Previews OFF'}</span>
            </button>
          </div>
          
          {recipient.wishlist?.length ? (
              <ul className="mt-3 space-y-3">
                {recipient.wishlist.map((item, idx) => {
                  // Handle both legacy (string) and new (object) formats
                  const description = typeof item === 'string' ? item : item.description;
                  const link = typeof item === 'object' ? item.link : null;

                  return (
                    <li key={idx} className="flex items-start gap-2 text-gray-900">
                      <span className="text-brand-500 mt-0.5 font-bold">{idx + 1}.</span>
                      <div className="flex-1 space-y-1.5">
                        <span className="block text-sm">{description}</span>
                        {link && (
                          <LinkPreviewTooltip url={link} description={description} enabled={previewsEnabled}>
                            <a
                              href={link}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="inline-flex items-center gap-1.5 text-xs px-3 py-1.5 bg-white border border-brand-500/30 text-brand-600 rounded-lg hover:bg-brand-50 hover:border-brand-500 transition-all font-medium shadow-sm hover:shadow"
                            >
                              <span>🔗</span>
                              <span>View Online</span>
                              <span className="text-[10px]">↗</span>
                            </a>
                          </LinkPreviewTooltip>
                        )}
                      </div>
                    </li>
                  );
                })}
              </ul>
            ) : (
              <p className="mt-2 text-muted-700 italic flex items-center gap-2">
                No wishlist provided yet.
              </p>
            )}
        </div>
      </div>
    </div>
  );
}
